name: On Push to Main

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Load Environment Variables
      run: |
        echo "Loading environment variables..."
        echo "IMAGE_URL=${{vars.IMAGE_URL}}" >> .env
        echo "IMAGE_URL_HOSTNAME=${{vars.IMAGE_URL_HOSTNAME}}" >> .env
        echo "IMAGE_URL_PROTOCOL=${{vars.IMAGE_URL_PROTOCOL}}" >> .env

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Authenticate Docker with ECR
      run: |
        aws ${{secrets.AWS_ECR_VISIBILITY}} get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{secrets.AWS_ECR_DOMAIN_NAME}}/${{secrets.AWS_REPOSITORY_ID}}
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Build and push to ECR
      run: |
        docker build -t ${{secrets.AWS_REPOSITORY_URI}} .
        docker tag ${{secrets.AWS_REPOSITORY_URI}}:${{secrets.AWS_IMAGE_TAG}} ${{secrets.AWS_ECR_DOMAIN_NAME}}/${{secrets.AWS_REPOSITORY_ID}}/${{secrets.AWS_REPOSITORY_URI}}:${{secrets.AWS_IMAGE_TAG}}
        docker push ${{secrets.AWS_ECR_DOMAIN_NAME}}/${{secrets.AWS_REPOSITORY_ID}}/${{secrets.AWS_REPOSITORY_URI}}:${{secrets.AWS_IMAGE_TAG}}
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_AWS_REPOSITORY_URI: ${{secrets.AWS_REPOSITORY_URI}}

    - name: Deploy to EC2 instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{secrets.AWS_EC2_HOST}}
        username: ${{secrets.AWS_EC2_USERNAME}}
        key: ${{secrets.AWS_EC2_PRIVATE_KEY}}
        script: |
          set -e # Exit immediately if a command exits with a non-zero status

          # Stop and remove existing container if it exists, ignoring errors
          sudo docker stop ${{secrets.HTTP_CONTAINER_NAME}} || true
          sudo docker rm -f ${{secrets.HTTP_CONTAINER_NAME}} || true

          # Remove existing Docker image
          sudo docker rmi -f ${{secrets.AWS_ECR_DOMAIN_NAME}}/${{secrets.AWS_REPOSITORY_ID}}/${{secrets.AWS_REPOSITORY_URI}}:${{secrets.AWS_IMAGE_TAG}}

          # Pull the latest Docker image from the ECR repository
          sudo docker pull ${{secrets.AWS_ECR_DOMAIN_NAME}}/${{secrets.AWS_REPOSITORY_ID}}/${{secrets.AWS_REPOSITORY_URI}}:${{secrets.AWS_IMAGE_TAG}}

          # Run the Docker container
          sudo docker run -d --name ${{secrets.HTTP_CONTAINER_NAME}} -p 3000:3000 ${{secrets.AWS_ECR_DOMAIN_NAME}}/${{secrets.AWS_REPOSITORY_ID}}/${{secrets.AWS_REPOSITORY_URI}}:${{secrets.AWS_IMAGE_TAG}}
        
    - name: Cleanup Unused Docker Resources
      run: |
        # Prune unused Docker resources to free up space
        sudo docker system prune -f